@using EduApply.Logic.Interfaces
@using EduApply.Logic.Service
@model IEnumerable<EduApply.Data.Entities.Certificate>
@{
    var certificateType = new List<SelectListItem>()
                            {
                                new SelectListItem {Text = "Graduate Degree", Value = "Graduate Degree"},
                                new SelectListItem {Text = "NYSC", Value = "NYSC"},
                                new SelectListItem {Text = "O'Level", Value = "O'Level"},
                                new SelectListItem {Text = "OND", Value = "OND"},
                                new SelectListItem {Text = "Post Graduate Degree", Value = "Post Graduate Degree"},
                                new SelectListItem {Text = "Professional Degree", Value = "Professional Degree"},
                                new SelectListItem {Text = "Transcript", Value = "Transcript"},
                                new SelectListItem{Text = "Others", Value = "Others"}
                            };
    var maxEntry = Convert.ToInt32(ViewBag.maxEntry);
}
@using (Html.BeginForm("SaveCertificate", "Fill", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @*@Html.AntiForgeryToken()*@

    <div class="form-horizontal">
        <h4>Upload Certificate</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger alert alert-danger" })
        <p style="color: green"><strong>Acceptable Format: JPEG maximum size is 200KB</strong></p>
        <div class="panel panel-primary">
            <div class="panel-heading">Certificate</div>
            <table class="table">
                @if (Model.Any())
                {
                    <thead>
                        <tr>
                            <th>Certificate</th>
                            <th>Type of Certificate</th>
                            <th></th>

                        </tr>
                    </thead>
                    <tbody id="certicateBody">
                        @foreach (var cert in Model)
                        {
                            <tr>
                                <td>@cert.CertificateName</td>
                                <td>@cert.CertificateType</td>
                                <td>@Html.ActionLink("Remove", "RemoveCertificate", "Fill", new { id = @cert.Id }, new { @class = "btn btn-xs btn-danger Delete" })</td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tr>
                        <td colspan="2">No certificate has been uploaded yet</td>
                    </tr>
                }



            </table>
        </div>
        <hr />


        <div class="form-group required">
            <label class=" control-label col-md-2">Select File:</label>
            <div class="col-md-4">
                <input type="file" class="form-control" id="certificateUpload" name="certificateUpload" data-val="true" data-val-required="Select a file" />
                @Html.ValidationMessage("certificateUpload", new { @class = "text-danger" })
            </div>

            <label class=" control-label col-md-2">Certificate Type:</label>
            <div class="col-md-4">
                @Html.DropDownList("certificateType", certificateType, new { @data_val = true, @data_val_required = "Select Type of Certificate", @class = "form-control" })
                @Html.ValidationMessage("certificateType", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (User.IsInRole("Student"))
                {

                    var applicationFormId = Convert.ToInt32(Session["AppFormId"]);
                    var appFormservice = EngineContext.Resolve<IApplicationFormRepository>();
                    var applicationFormWorkFlow = appFormservice.GetFirstApplicationFormWorkFlow(applicationFormId);
                    var workFlow = appFormservice.GetWorkFlowItem(applicationFormWorkFlow.WorkFlowId);
                    var templatesForAppForm = appFormservice.GetFirstTemplatesInApp(applicationFormId);
                    var formTemplate = appFormservice.GetFormTemplate(templatesForAppForm.FormTemplateId);

                    if (!(workFlow.Name.Equals("Fill") && formTemplate.Code.Equals("CU")))
                    {
                        @Html.ActionLink("<< Back", "BackApplication", "Fill", null, new { @class = "btn btn-default" })
                    }
                    if (@Model.Count() < maxEntry)
                    {<input type="submit" value="Add" class="btn btn-primary" />
                    }
                    else
                    {
                        <input type="submit" value="Save" class="btn btn-primary" disabled="" />
                    }

                    @Html.ActionLink("Continue >>", "FinishCertUpload", null, new { @class = "btn btn-primary" })
                }
                else
                {
                    @Html.ActionLink("<< Back", "BackApplication", "Fill", null, new { @class = "btn btn-default", @disabled = true })
                    <input type="submit" value="Save" class="btn btn-success disabled" />
                    @Html.ActionLink("Continue >>", "FinishCertUpload", null, new { @class = "btn btn-success", @disabled = true })
                }

            </div>
        </div>
    </div>
}

<script>
    $(function () {
        $(".Delete").click(function () {
            return confirm("Are you sure you want to remove this certificate");
        });
    });
</script>