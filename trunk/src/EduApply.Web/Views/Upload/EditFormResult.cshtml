@model EduApply.Web.Models.FormResultModel

@{
    ViewBag.Title = "EditFormResult";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

<h2>Edit Application Result</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true)
        <div class="form-group">
            @Html.LabelFor(model => model.ApplicationFormId, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ApplicationFormId, new SelectList(Model.ApplicationForms, "Id", "Name", Model.ApplicationFormId), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ApplicationFormId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AppNum, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AppNum, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.AppNum)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EngScore, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EngScore, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EngScore)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject2, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject2)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject2Score, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject2Score, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject2Score)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject3, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject3)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject3Score, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject3Score, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject3Score)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject4, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject4, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject4)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject4Score, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject4Score, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject4Score)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalScore, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalScore, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.TotalScore)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="saveFormResult" value="Save" class="btn btn-success" />
                @Html.ActionLink("cancel", "FormResultUpload", new { applicationFormId = Model.ApplicationFormId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

<script>
    $(function () {
        toastr.options =
        {
            "closeButton": false,
            "debug": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        var lastValue = '';
        $('#EngScore,#Subject2Score,#Subject3Score,#Subject4Score').on('change keyup paste mouseup', function () {
            if ($(this).val() != lastValue) {
                lastValue = $(this).val();
                var engScore = $("#EngScore").val();
                if (isNaN(engScore) || engScore == "") {
                    engScore = 0;
                } else {
                    engScore = parseFloat($("#EngScore").val());
                }
                var subject2Score = $("#Subject2Score").val();
                if (isNaN(subject2Score) || subject2Score == "") {
                    subject2Score = 0;
                } else {
                    subject2Score = parseFloat($("#Subject2Score").val());
                }
                var subject3Score = $("#Subject3Score").val();
                if (isNaN(subject3Score) || subject3Score == "") {
                    subject3Score = 0;
                }
                else {
                    subject3Score = parseFloat($("#Subject3Score").val());
                }

                var subject4Score = $("#Subject4Score").val();
                if (isNaN(subject4Score) || subject4Score == "") {
                    subject4Score = 0;
                }
                else {
                    subject4Score = parseFloat($("#Subject4Score").val());
                }
                document.getElementById("TotalScore").value = (parseFloat(engScore) + parseFloat(subject2Score) + parseFloat(subject3Score) + parseFloat(subject4Score)).toFixed(2);
            }


        }
        );


        //var enteredTotalScore = $("#TotalScore").val();

        //var engScore = $("#EngScore").val();
        //var subject2Score = $("#Subject2Score").val();
        //var subject3Score = $("#Subject3Score").val();
        //var subject4Score = $("#Subject4Score").val();

        //var computedTotalScore = (parseFloat(engScore) + parseFloat(subject2Score) + parseFloat(subject3Score) + parseFloat(subject4Score)).toFixed(2);

        //if (engScore != "" || subject2Score != "" || subject3Score != "" || subject4Score != "") {
        //    if (enteredTotalScore != computedTotalScore) {
        //        alert(enteredTotalScore);
        //        alert(computedTotalScore);
        //        //toastr.error("The addition of the four scores and Total Score are not equal");
        //        return false;
        //    }
        //}


    });
</script>
