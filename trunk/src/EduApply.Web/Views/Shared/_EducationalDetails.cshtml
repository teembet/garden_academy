@using EduApply.Logic.Interfaces
@using EduApply.Logic.Service
@model  EduApply.Web.Models.EducationalDetailsCollection

    @{
        var graduationMonth = new List<SelectListItem>()
                            {
                                new SelectListItem {Text = "January", Value = "January"},
                                new SelectListItem {Text = "February", Value = "February"},
                                new SelectListItem {Text = "March", Value = "March"},
                                new SelectListItem {Text = "April", Value = "April"},
                                new SelectListItem{Text = "May", Value = "May"},
                                new SelectListItem {Text = "June", Value = "June"},
                                new SelectListItem {Text = "July", Value = "July"},
                                new SelectListItem {Text = "August", Value = "August"},
                                new SelectListItem  {Text = "September", Value = "September"},
                                new SelectListItem {Text = "October", Value = "October"},
                                new SelectListItem {Text = "November", Value = "November"},
                                new SelectListItem{Text = "December", Value = "December"}
                            };

        var maxEntry = Convert.ToInt32(ViewBag.maxEntry);
        var configurationService = EngineContext.Resolve<IConfigurationService>();
        var localTime = configurationService.GetCurrentWestAfricanDateTime();

    }


    <h4>Educational Details</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger alert alert-danger" })

    <div class="panel panel-primary ">
        <div class="panel-heading">Educational Details</div>
        <table class="table">
            @if (Model.EducationalDetails.Any())
            {
                <tr><th>School</th><th>Qualification</th><th>Class of Degree</th><th>Entry Year</th><th>Graduation Month</th><th>Graduation Year</th></tr>

                foreach (var sch in Model.EducationalDetails)
                {
                    <tr id="@sch.Id-read">
                        <td>@sch.SchoolName</td>
                        <td>@sch.Qualification</td>
                        <td>@sch.ClassOfDegree</td>
                        <td>@sch.EntryYear</td>
                        <td>@sch.GraduationMonth</td>
                        <td>@sch.GraduationYear</td>
                        <td><a href="#" onclick="return editEducationalDetails(@sch.Id);" class="btn btn-primary btn-xs">Edit</a></td>
                        <td>@Html.ActionLink("Delete", "Delete", "EducationalDetails", new { id = @sch.Id }, new { @class = "btn btn-xs btn-danger Delete" })</td>
                    </tr>
                    using (Html.BeginForm("Update", "EducationalDetails"))
                    {
                        @Html.AntiForgeryToken()
                        <tr id="@sch.Id-edit" style="display: none">
                            <td>
                                <input type="hidden" value="@sch.Id" name="id" />
                                <input type="text" value="@sch.SchoolName" class="form-control" name="editSchName" data-val="true" data-val-required="" />
                            </td>
                            <td><input type="text" value="@sch.Qualification" class="form-control" name="editQualification" data-val="true" data-val-required="" /></td>
                            <td>@Html.DropDownList("editClassOfDegree", new SelectList(Model.ClassOfDegrees, "Name", "Name"), new { @data_val = true, @data_val_required = "Select Class of Degree", @class = "form-control" })</td>
                            @*<td><input type="text" value="@sch.ClassOfDegree" class="form-control" name="editClassOfDegree" data-val="true" data-val-required="" /></td>*@
                            <td>@Html.DropDownList("editGradMonth", graduationMonth, new { @data_val = true, @data_val_required = "Select Graduation Month", @class = "form-control" })</td>
                            <td> <input type="text" value="@sch.EntryYear" class="form-control" name="editEntryYear" data-val="true" data-val-required="" data-val-number="That is not a valid year." data-val-range="The Year specified is not acceptable" data-val-range-max="@localTime.Year" data-val-range-min="1960" /> </td>
                            <td> <input type="text" value="@sch.GraduationYear" class="form-control" name="editGradYear" data-val="true" data-val-required="" data-val-number="That is not a valid year." data-val-range="The Year specified is not acceptable" data-val-range-max="2099" data-val-range-min="1960" /> </td>
                            <td><input type="submit" value="update" class="btn btn-xs btn-primary" /></td>
                            <td><a href="#" onclick="return cancelEdit(@sch.Id);" class="btn btn-default btn-xs">Cancel</a></td>
                        </tr>
                    }
                }
            }
            else
            {
                <tr>
                    <td>No Educational Detail has been added yet</td>
                </tr>
            }

        </table>
    </div>

    <hr />

    @using (Html.BeginForm("AddEducationalDetail", "EducationalDetails", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <div class="form-group required">
                <label class=" control-label col-md-2">School Name:</label>
                <div class="col-md-6">
                    <input type="text" class="form-control" name="schoolName" data-val="true" data-val-required="Name of School is required." />
                    @Html.ValidationMessage("schoolName", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="form-group required">
                    @Html.LabelFor(model => model.SchoolName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SchoolName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SchoolName, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="form-group required">
                <label class=" control-label col-md-2">Qualification:</label>
                <div class="col-md-6">
                    <input type="text" class="form-control" name="qualification" data-val="true" data-val-required="Qualification is required." placeholder="B.Sc - Computer Science" />
                    @Html.ValidationMessage("qualification", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="form-group required">
                    @Html.LabelFor(model => model.Qualification, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Qualification, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Qualification, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group required">
                <label class=" control-label col-md-2">Class of Degree:</label>
                <div class="col-md-6">
                    @Html.DropDownList("classOfDegree", new SelectList(Model.ClassOfDegrees, "Name", "Name"), new { @data_val = true, @data_val_required = "Select Class of Degree", @class = "form-control" })
                    @*<input type="text" class="form-control" name="classOfDegree" data-val="true" data-val-required="Class of Degree is required." />*@
                    @Html.ValidationMessage("classOfDegree", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group custom-hide-none" id="OtherDegreeDiv">
                <label class="control-label col-md-2">Specify Degree</label>
                <div class="col-md-6">
                    <input type="text" id="OtherDegree" name="otherDegree" class="form-control" data-val="true" data-val-required="Specify your Class of Degree" />
                </div>

            </div>
            @*<div class="form-group">
                    @Html.LabelFor(model => model.CGPA, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CGPA, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CGPA, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            
            <div class="form-group required">
                <label class=" control-label col-md-2">Graduation Month:</label>
                <div class="col-md-6">
                    @Html.DropDownList("graduationMonth", graduationMonth, new { @data_val = true, @data_val_required = "Select Graduation Month", @class = "form-control" })
                    @*<input type="text" class="form-control" name="classOfDegree" data-val="true" data-val-required="Class of Degree is required." />*@
                    @Html.ValidationMessage("graduationMonth", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group required">
                <label class=" control-label col-md-2">Entry Year:</label>
                <div class="col-md-6">
                    <input type="text" class="form-control" name="entryYear" data-val="true" data-val-required="Year of Entry is required." data-val-number="That is not a valid year." data-val-range="The Year specified is not acceptable" data-val-range-max="@localTime.Year" data-val-range-min="1960" />
                    @Html.ValidationMessage("entryYear", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group required">
                    @Html.LabelFor(model => model.EntryYear, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EntryYear, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EntryYear, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group required">
                <label class=" control-label col-md-2">Graduation Year:</label>
                <div class="col-md-6">
                    <input type="text" class="form-control" name="graduationYear" data-val="true" data-val-required="Year of Graduation is required." data-val-number="That is not a valid year." data-val-range="The Year specified is not acceptable" data-val-range-max="@localTime.Year" data-val-range-min="1960" />
                    @Html.ValidationMessage("graduationYear", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group required">
                    @Html.LabelFor(model => model.GraduationYear, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GraduationYear, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GraduationYear, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            @if (User.IsInRole("Student"))
            {
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-6">
                        @{
                var applicationFormId = Convert.ToInt32(Session["AppFormId"]);
                var appFormservice = EngineContext.Resolve<IApplicationFormRepository>();
                var applicationFormWorkFlow = appFormservice.GetFirstApplicationFormWorkFlow(applicationFormId);
                var workFlow = appFormservice.GetWorkFlowItem(applicationFormWorkFlow.WorkFlowId);
                var templatesForAppForm = appFormservice.GetFirstTemplatesInApp(applicationFormId);
                var formTemplate = appFormservice.GetFormTemplate(templatesForAppForm.FormTemplateId);
                        }
                        @if (!(workFlow.Name.Equals("Fill") && formTemplate.Code.Equals("ED")))
                        {
                            @Html.ActionLink("<< Back", "BackApplication", "Fill", null, new { @class = "btn btn-default" })
                        }
                        @if (@Model.EducationalDetails.Count() < maxEntry)
                        {
                            <input type="submit" value="Save" class="btn btn-primary" />
                        }
                        else
                        {
                            <input type="submit" value="Save" class="btn btn-primary" disabled="" />
                        }
                        @Html.ActionLink("Continue >>", "ContinueFromEducationalDetails", "EducationalDetails", null, new { @class = "btn btn-success" })
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-6">

                        @Html.ActionLink("<< Back", "BackApplication", "Fill", null, new { @class = "btn btn-default", @disabled = true })
                        <input type="submit" value="Save" class="btn btn-primary" disabled="" />
                        @Html.ActionLink("Continue >>", "ContinueFromEducationalDetails", "EducationalDetails", null, new { @class = "btn btn-success", @disabled = true })
                    </div>
                </div>
            }


            @*<div class="form-group custom-hide">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ApplicationId, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>*@
        </div>
    }

    <script type="text/javascript">

        $(function () {
            $(".Delete").click(function () {
                return confirm("Are you sure you want to delete this Educational detail from your application");
            });


            $("#classOfDegree").change(function (e) {
                var toShow = document.getElementById("classOfDegree");
                if (toShow.value == "Others") {
                    $("#OtherDegreeDiv").show();
                }
                else {
                    $("#OtherDegreeDiv").hide();
                }

            });
        });

        function editEducationalDetails(id) {
            $("#" + id + '-read').hide();
            $("#" + id + '-edit').show();
        }
        function cancelEdit(id) {
            $("#" + id + '-edit').hide();
            $("#" + id + '-read').show();
        }
    </script>
