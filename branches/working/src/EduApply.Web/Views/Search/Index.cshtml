@model EduApply.Web.Models.SearchModel

@{
    ViewBag.Title = "Search";
    Layout = "~/Views/Shared/AdminLayout.cshtml";


    var paymentStatus = new List<SelectListItem>()
    {
        new SelectListItem(){Text = "All",Value = ""},
        new SelectListItem(){Text = "Paid",Value = "true"},
        new SelectListItem(){Text = "Unpaid",Value = "false"}
    };
    var admissionStatus = new List<SelectListItem>()
    {
        new SelectListItem(){Text = "All",Value = ""},
        new SelectListItem(){Text = "Admitted",Value = "true"},
        new SelectListItem(){Text = "Not Admitted",Value = "false"}
    };
    var submissionStatus = new List<SelectListItem>()
    {
        new SelectListItem(){Text = "All",Value = ""},
        new SelectListItem(){Text = "Submitted",Value = "true"},
        new SelectListItem(){Text = "Not Submitted",Value = "false"}
    };
    var dateTypes = new List<SelectListItem>()
    {
        new SelectListItem(){Text = "All",Value = "All"},
        new SelectListItem(){Text = "Application Entry Date",Value = "Application Entry Date"},
        new SelectListItem(){Text = "Exam Date",Value = "Exam Date"},
        new SelectListItem(){Text = "Form Template Completion Date",Value = "Form Template Completion Date"},
        new SelectListItem(){Text = "Payment Date",Value = "Payment Date"},
        new SelectListItem(){Text = "Submission Date",Value = "Submission Date"},

    };
}

@*<h2>Search</h2>*@

@using (Html.BeginForm("Index", "Search", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div>
        <h4 style="color: green">Search using any of the inputs below</h4>
        <hr />
        @Html.ValidationSummary(true)
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.SessionId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.SessionId, new SelectList(Model.Sessions, "Id", "Name", Model.SessionId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SessionId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.FormId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.FormId, new SelectList(Model.ApplicationForms, "Id", "Name", Model.FormId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.FormId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.FormTemplateId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.FormTemplateId, new SelectList(Model.FormTemplates, "Id", "Name", Model.FormTemplateId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.FormTemplateId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.FacultyId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.FacultyId, new SelectList(Model.Faculties, "Id", "Name", Model.FacultyId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.FacultyId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.DepartmentId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.DepartmentId, new SelectList(Model.Departments, "Id", "Name", Model.DepartmentId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DepartmentId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.CourseOfStudyId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.CourseOfStudyId, new SelectList(Model.Courses, "Id", "Name", Model.CourseOfStudyId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CourseOfStudyId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.ProgramId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.ProgramId, new SelectList(Model.Programs, "Id", "Code", Model.ProgramId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProgramId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.VenueId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.VenueId, new SelectList(Model.Venues, "Id", "Name", Model.VenueId), "All", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VenueId)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.IsPaid, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.IsPaid, paymentStatus, new { @class = "form-control" })
                @*@Html.EditorFor(model => model.IsPaid)*@
                @Html.ValidationMessageFor(model => model.IsPaid)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.IsSubmitted, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.IsSubmitted, submissionStatus, new { @class = "form-control" })
                @*@Html.EditorFor(model => model.IsSubmitted)*@
                @Html.ValidationMessageFor(model => model.IsSubmitted)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.IsAdmitted, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.IsAdmitted, admissionStatus, new { @class = "form-control" })
                @*@Html.EditorFor(model => model.IsAdmitted)*@
                @Html.ValidationMessageFor(model => model.IsAdmitted)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.DateType, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.DateType, dateTypes, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, new { @class = "control-label" })
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control custom-disable-textbox size92", @readonly = true } })
                @Html.ValidationMessageFor(model => model.StartDate)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.EndDate, new { @class = "control-label" })
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control custom-disable-textbox size92", @readonly = true } })
                @Html.ValidationMessageFor(model => model.EndDate)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.AppNo, new { @class = "control-label" })
                @Html.EditorFor(model => model.AppNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AppNo)
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.RegNo, new { @class = "control-label" })
                @Html.EditorFor(model => model.RegNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RegNo)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <input type="submit" value="Search" class="btn btn-success" />
                <a href="#" id="exportButton" class="btn btn-warning">Export</a>
                <hr />
            </div>
        </div>
    </div>

}
@using (Html.BeginForm("PreviewName", "Search", FormMethod.Post, new { id = "updateForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.FormId)
    <div class="row">
        <div class="col-md-12">
            <table class="table panel panel-primary table-striped" id="editTable" style="display: none">
                <thead>
                    <tr class="panel-primary">
                        <th colspan="7" class="panel-heading">Edit Name</th>
                    </tr>
                </thead>
                <tr>
                    <th>Last Name</th>
                    <th>First Name</th>
                    <th>Middle Name</th>
                    <th colspan="4"></th>
                </tr>
                <tr>
                    <td><input type="text" id="editLastName" class="form-control" name="lastName" data-value="" data-val-required="" /></td>
                    <td><input type="text" id="editFirstName" class="form-control" name="firstName" data-value="" data-val-required="" /></td>
                    <td><input type="text" id="editMiddleName" class="form-control" name="middleName" data-value="" data-val-required="" /></td>
                    <td><input type="submit" value="update" id="updateNamew" class="btn btn-xs btn-primary" /></td>
                    <td><a onclick="return hideTable" class="btn btn-default btn-xs" id="editCancelbtn">Cancel</a></td>
                    <td><input type="hidden" id="editAppId" name="AppId"/></td>
                    <td><input type="hidden" id="editAppNum" name="AppNum" /></td>
                </tr>
            </table>
        </div>
    </div>
}
<div class="row"></div>
<div class="col-md-12">
    <div class="panel panel-primary">
        <div class="panel-heading">Search Result</div>
        <table class="table table-responsive" id="searchResultTable">
            <thead>
                <tr><th>S/N</th><th>Name</th><th>Reg Num</th><th>App Num</th><th>Program Course</th><th>Application Date</th><th>Submission Date</th><th style="width: 80px"></th></tr>
            </thead>
            <tbody>
                @if (Model.SearchResult.Any())
                {
                    var counter = 1;
                    foreach (var result in Model.SearchResult)
                    {
                        <tr>
                            <td>@counter</td>
                            @*<td id="lastname" data-value="@result.Lastname" style="display:none"></td>
                                <td id="firstname" data-value="@result.Firsname" style="display:none"></td>
                                <td id="middlename" data-value="@result.Middlename" style=" display:none"></td>*@
                            @*<td>
                                    <input type="hidden" id="lastname" value="@result.Lastname"/>
                                    <input type="hidden" id="firstname" value="@result.Firsname" />
                                    <input type="hidden" id="middlename" value="@result.Middlename" />
                                </td>*@
                            <td id="@result.ApplicationId-appname">@result.Lastname @result.Firsname @result.Middlename</td>
                            <td>@result.RegNum</td>
                            <td id="@result.ApplicationId-appNum">@result.AppNum</td>
                            <td>@result.ProgramCourse</td>
                            <td>@Convert.ToDateTime(result.ApplicationDate).ToString("dd-MMM-yyyy h:mm tt")</td>
                            @if (result.SubmissionDate != null)
                            {
                                <td>@Convert.ToDateTime(result.SubmissionDate).ToString("dd-MMM-yyyy h:mm tt")</td>
                            }
                            else
                            {
                                <td>NOT SUBMITTED</td>
                            }
                            <td style="width: 10.5%">
                                <select class="form-control">
                                    <option selected="" data-id="Default" data-value="-1">Select Action</option>
                                    <option data-action="PrintAppForm" data-value="@result.ApplicationId">Print Application Form</option>
                                    <option data-action="PrintPhotoCard" data-value="@result.ApplicationId">Print Photo Card</option>
                                    <option data-action="ResetApplication" data-value="@result.ApplicationId">Reset Application</option>
                                    <option data-action="RevalidatePayment" data-value="@result.ApplicationId">Revalidate Payment</option>
                                    <option data-action="ReversePayment" data-value="@result.ApplicationId">Reverse Payment</option>
                                    <option data-action="DownloadUploads" data-value="@result.ApplicationId">Download Uploads</option>
                                    <option data-action="EditName" data-value="@result.ApplicationId" id="edit">Edit Name</option>
                                </select>
                                @*<a href='@Url.Action("ResetApplication","Search",new{appId = result.ApplicationId})'><img src="~/images/editedRefresh.png" alt="reset application" title="reset application" /></a> |
                                    <a href='@Url.Action("ReversePayment","Search",new{appId = result.ApplicationId})'><img src="~/images/editedRefresh.png" alt="reset application" title="reverse payment" /></a> |
                                    <a href='@Url.Action("RevalidatePayment","Search",new{appId = result.ApplicationId})'><img src="~/images/editedRefresh.png" alt="reset application" title="revalidate payment" /></a> |
                                    <a href='@Url.Action("PrintPhotoCard", "Application", new { applicationId = result.ApplicationId })'><img src="~/images/editedDownload.png" alt="print Photo Card" title="print photo card" /></a> |*@
                                @*<a href='@Url.Action("PrintAdmissionLetter", "Validation", new { appNumOrRegNum = result.AppNum })'><img src="~/images/editedDownload.png" alt="print admission letter" title="print admission letter" /></a> |*@
                                @*<a href='@Url.Action("PrintAppForm", "Application", new { applicationId = result.ApplicationId })'><img src="~/images/editedPrint.png" alt="print application form" title="print application form" /></a>*@
                            </td>
                        </tr>

                            counter++;
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    $(function () {

        jQuery.fn.center = function () {
            this.css("position", "fixed");
            this.css("top", ($(window).height() / 2) - (this.outerHeight() / 2));
            this.css("left", ($(window).width() / 2) - (this.outerWidth() / 2));
            return this;
        };

        $("#searchResultTable").dataTable();

        toastr.options =
        {
            "closeButton": false,
            "debug": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
        $('#StartDate,#EndDate').datepicker({

            showOn: "button",
            buttonImage: "/images/calendar.gif",
            // buttonImage: "/EduApply/images/calendar.gif",
            buttonImageOnly: true,
            buttonText: "Select date",
            defaultDate: 'Date.today()',
            dateFormat: 'dd-M-yy',
            changeMonth: true,
            changeYear: true,
            yearRange: '1960:2060'
        });

        $('select').on('change', function (e) {
            var action = $('option:selected', this).data('action');
            var appId = $('option:selected', this).data('value');
            var studName = $("#" + appId + '-appname').text();
            var appNum = $("#" + appId + '-appNum').text();
            console.log(appNum);
            switch (action) {
                case 'PrintAppForm':
                    window.location = '/Application/PrintAppForm?applicationId=' + appId;
                    break;
                case 'PrintPhotoCard':
                    window.location = '/Application/PrintPhotoCard?applicationId=' + appId;
                    break;
                case 'ResetApplication':
                    window.location = '/Search/ResetApplication?appId=' + appId;
                    break;
                case 'RevalidatePayment':
                    window.location = '/Search/RevalidatePayment?appId=' + appId;
                    break;
                case 'ReversePayment':
                    window.location = '/Search/ReversePayment?appId=' + appId;
                    break;
                case 'DownloadUploads':
                    window.location = '/Download/DownloadUploads?applicationId=' + appId;
                    break;
                case 'EditName':
                    var splitedName = studName.split(" ", 3);
                    console.log(splitedName);
                    $("#editAppId").val(appId);
                    $("#editAppNum").val(appNum);
                    $("#editLastName").val(splitedName[0]);
                    $("#editFirstName").val(splitedName[1]);
                    $("#editMiddleName").val(splitedName[2]);
                    $('#editTable').show();
                    //showProgress();
                    //$.ajax({
                    //    cache: false,
                    //    type: "POST",
                    //    url: "/Download/DownloadUploads",
                    //    data: { "applicationId": appId },
                    //    success: function (filename) {
                    //        hideProgress();
                    //        window.location = '/Download/DownloadZip?fileName=' + filename;
                    //    },
                    //    error: function (xhr, ajaxOptions, thrownError) {
                    //        $("#loading").hide();
                    //        alert('Error occured');
                    //        return false;
                    //    }

                    //});

                    break;

                default:
            }
            e.preventDefault();
        });

        $('#editCancelbtn').click(function () {
            $('#editTable').css('display','none');
        })

        $("#exportButton").click(function () {
            var appNums = [];
            $("#searchResultTable tr:gt(0)").each(function () {
                var row = $(this);
                var applicationNumber = $.trim(row.find('td:eq(3)').html());
                if (applicationNumber != "") {
                    appNums.push(applicationNumber);
                }

            });
            if (appNums.length == 0) {
                toastr.info("No record to export");
                return false;
            }
            exportResult(appNums);
        });

        function editCancelbtn() {
            $("#editTable").hide();
        }


        var spinnerVisible = false;
        function showProgress() {
            if (!spinnerVisible) {
                $("div#loading").fadeIn("fast");
                spinnerVisible = true;
            }
        };
        function hideProgress() {
            if (spinnerVisible) {
                var spinner = $("div#loading");
                spinner.stop();
                spinner.fadeOut("fast");
                spinnerVisible = false;
            }
        };

        function exportResult(appNums) {
            showProgress();
            $.ajax({
                cache: false,
                type: "POST",
                //before passing an array to a controller from ajax traditional must be set to true or else controller wont recieve the array
                traditional: true,
                //url: "/EduApply/Download/CreateExcelForSearch",
                url: "/Download/CreateExcelForSearch",
                data: { "appNums": appNums },
                success: function (filename) {
                    //window.location = '/EduApply/Download/DownloadExcel?file=' + filename;
                    hideProgress();
                    window.location = '/Download/DownloadExcel?file=' + filename;
                    //  toastr.success("Download Complete");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $("#loading").hide();
                    alert('Error occured');
                    return false;
                }

            });
        }

        $("#SessionId").change(function () {
            var selectedItem = $(this).val();
            var ddlAppForms = $("#FormId");
            // var statesProgress = $("#states-loading-progress");
            //statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                //url: "/EduApply/Search/GetApplicationFormsBySessionId",
                url: "/Search/GetApplicationFormsBySessionId",
                data: { "sessionId": selectedItem },
                success: function (data) {
                    ddlAppForms.html('');
                    ddlAppForms.append($('<option></option>').val(null).html("All"));
                    $.each(data, function (id, option) {
                        ddlAppForms.append($('<option></option>').val(option.id).html(option.name));
                    });
                    // statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Application Forms.');
                    //   statesProgress.hide();
                }
            });
        });

        //Faculty drop down event change handler
        $("#FacultyId").change(function () {
            var selectedItem = $(this).val();
            var ddlDepartments = $("#DepartmentId");
            // var statesProgress = $("#states-loading-progress");
            //statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                //url: "/EduApply/Search/GetDepartmentsByFacultyId",
                url: "/Search/GetDepartmentsByFacultyId",
                data: { "facultyId": selectedItem },
                success: function (data) {
                    ddlDepartments.html('');
                    ddlDepartments.append($('<option></option>').val(null).html("All"));
                    $.each(data, function (id, option) {
                        ddlDepartments.append($('<option></option>').val(option.id).html(option.name));
                    });
                    // statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve departments.');
                    //   statesProgress.hide();
                }
            });
        });

        //Department drop down change event handler
        $("#DepartmentId").change(function () {
            var selectedItem = $(this).val();
            var ddlCourses = $("#CourseOfStudyId");
            // var statesProgress = $("#states-loading-progress");
            //statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                //url: "/EduApply/Search/GetCoursesByDepartmentId",
                url: "/Search/GetCoursesByDepartmentId",
                data: { "departmentId": selectedItem },
                success: function (data) {
                    ddlCourses.html('');
                    ddlCourses.append($('<option></option>').val(null).html("All"));
                    $.each(data, function (id, option) {
                        ddlCourses.append($('<option></option>').val(option.id).html(option.name));
                    });
                    // statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve courses.');
                    //   statesProgress.hide();
                }
            });
        });

        //Courses drop down change event handler
        $("#CourseOfStudyId").change(function () {
            var selectedItem = $(this).val();
            var ddlPrograms = $("#ProgramId");
            // var statesProgress = $("#states-loading-progress");
            //statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                //url: "/EduApply/Search/GetProgramsByCourseId",
                url: "/Search/GetProgramsByCourseId",
                data: { "courseId": selectedItem },
                success: function (data) {
                    ddlPrograms.html('');
                    ddlPrograms.append($('<option></option>').val(null).html("All"));
                    $.each(data, function (id, option) {
                        ddlPrograms.append($('<option></option>').val(option.id).html(option.name));
                    });
                    // statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve programs.');
                    //   statesProgress.hide();
                }
            });
        });

        //Courses drop down change event handler
        $("#FormId").change(function () {
            var selectedItem = $(this).val();
            var ddlFormTemplatess = $("#FormTemplateId");
            // var statesProgress = $("#states-loading-progress");
            //statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                //url: "/EduApply/Search/GetProgramsByCourseId",
                url: "/Search/GetFormTemplatesByFormId",
                data: { "formId": selectedItem },
                success: function (data) {
                    ddlFormTemplatess.html('');
                    ddlFormTemplatess.append($('<option></option>').val(null).html("All"));
                    $.each(data, function (id, option) {
                        ddlFormTemplatess.append($('<option></option>').val(option.id).html(option.name));
                    });
                    // statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve form templates.');
                    //   statesProgress.hide();
                }
            });
        });
    });
</script>
@if (TempData["ErrorMessage"] != null)
{
    var errorMessage = TempData["ErrorMessage"].ToString();
    switch (errorMessage)
    {

        case "PAYMENT RECORD NOT FOUND":
            <script type="text/javascript">
                $(function () {
                    toastr.error("Payment Record was not found");
                })
            </script>
            break;
        case "NOT ADMITTED":
        <script type="text/javascript">
            $(function () {
                toastr.info("Applicant has not been admitted");
            })
        </script>
            break;
        case "NOT APPLICATION FORM":
        <script type="text/javascript">
            $(function () {
                toastr.info("Form Type is not an Application Form");
            })
        </script>
            break;
        case "NOT SUBMITTED":
        <script type="text/javascript">
            $(function () {
                toastr.info("Application is not complete");
            })
        </script>
            break;


        case "RESET SUCCESSFUL":
        <script type="text/javascript">
            $(function () {
                toastr.success("Reset successful");
            })
        </script>
            break;

        case "REVERSAL SUCCESSFUL":
        <script type="text/javascript">
            $(function () {
                toastr.success("Payment Successfully Reversed");
            })
        </script>
            break;

        case "REVERSAL FAILED":
        <script type="text/javascript">
            $(function () {
                toastr.error("Reversal Failed");
            })
        </script>
            break;
        case "REVALIDATE SUCCESSFUL":
        <script type="text/javascript">
            $(function () {
                toastr.success("Payment Successfully Revalidated");
            })
        </script>
            break;
        case "REVALIDATE FAILED":
        <script type="text/javascript">
            $(function () {
                toastr.error("Payment Revalidation Failed");
            })
        </script>
            break;
        case "REVALIDATE UNNECESSARY":
        <script type="text/javascript">
            $(function () {
                toastr.warning("Application has already been marked as paid");
            })
        </script>
            break;
        case "REVERSAL UNNECESSARY":
        <script type="text/javascript">
            $(function () {
                toastr.warning("Application is not marked as paid");
            })
        </script>
            break;
        case "UPLOAD EMPTY":
        <script type="text/javascript">
            $(function () {
                toastr.info("No upload was found for applicant");
            })
        </script>
            break;
    }

}