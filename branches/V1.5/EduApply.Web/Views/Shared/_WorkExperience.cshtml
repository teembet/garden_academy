@using System.Web.UI.WebControls
@using EduApply.Logic.Interfaces
@using EduApply.Logic.Service
@model IEnumerable<EduApply.Data.Entities.WorkExperience>
@{
    var maxEntry = Convert.ToInt32(ViewBag.maxEntry);
}

<h4>Employment History</h4>
<hr />
@Html.ValidationSummary(true, "", new { @class = "text-danger alert alert-danger" })


<div class="panel panel-primary">
    <div class="panel-heading">Employment History</div>
    <table class="table">
        @if (Model.Any())
        {
            var counter = 1;
            <tr><th>Organization</th><th>From</th><th>To</th><th>Position</th><th>Job Description</th></tr>

            foreach (var work in Model)
            {
                using (Html.BeginForm("Update", "WorkExperience"))
                {
                    var item = work;
                    @Html.AntiForgeryToken()
                    <tr id="@work.Id-read">
                        <td>@work.Organization</td>
                        <td>@work.FromDate.ToString("dd-MMM-yyyy")</td>
                        <td>@(work.ToDate != null ? Convert.ToDateTime(work.ToDate).ToString("dd-MMM-yyyy") : "Still work here")</td>
                        <td>@work.Position</td>
                        <td>@work.JobDescription</td>
                        <td><a href="#" onclick="return editWorkExperience(@work.Id);" class="btn btn-primary btn-xs">Edit</a></td>
                        <td>@Html.ActionLink("Delete", "Delete", "WorkExperience", new { wrkExpId = @work.Id }, new { @class = "btn btn-xs btn-danger Delete" })</td>
                    </tr>

                    <tr id="@work.Id-edit" style="display: none">
                        <td>
                            <input type="hidden" value="@work.Id" name="id" />
                            <input type="text" value="@work.Organization" class="form-control" name="editOrg" data-val="true" data-val-required="" />
                        </td>
                        <td><input type="text" id="StartDate-@counter" value="@work.FromDate.ToString("dd-MMM-yyyy")" class="form-control custom-disable-textbox size90" name="editFromDate" data-val="true" data-val-required="" readonly="" /></td>
                        <td><input type="text" id="EndDate-@counter" value="@Convert.ToDateTime(work.ToDate).ToString("dd-MMM-yyyy")" class="form-control custom-disable-textbox size90" name="editToDate" data-val="true" data-val-required="" readonly="" /></td>
                        <td> <input type="text" value="@work.Position" class="form-control" name="editPosition" data-val="true" data-val-required="" /> </td>
                        <td> <input type="text" value="@work.JobDescription" class="form-control" name="editJobDesc" data-val="true" data-val-required="" /> </td>
                        <td><input type="submit" value="update" class="btn btn-xs btn-primary" /></td>
                        <td><a href="#" onclick="return cancelEdit(@work.Id);" class="btn btn-default btn-xs">Cancel</a></td>
                    </tr>

                }
                counter++;
            }
        }
        else
        {
            <tr>
                <td>No Work Experience has been added yet</td>
            </tr>
        }

    </table>
</div>

<hr />
@using (Html.BeginForm("AddWorkExperience", "WorkExperience", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="form-group required">
            <label class=" control-label col-md-2">Organization:</label>
            <div class="col-md-6">
                <input type="text" class="form-control" name="organization" data-val="true" data-val-required="organization is required" />
                @Html.ValidationMessage("organization", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="required">
                <label class=" control-label col-md-2">Start Date:</label>
                <div class="col-md-3">
                    <input type="text" readonly="" class="form-control custom-disable-textbox size92" id="StartDate" name="startDate" data-val="true" data-val-required="start Date is required" />
                    @Html.ValidationMessage("startDate", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="required">
                <label class=" control-label col-md-2">End Date:</label>
                <div class="col-md-3">
                    <input type="text" readonly="" class="form-control custom-disable-textbox size92" id="EndDate" name="endDate" />
                    @Html.ValidationMessage("endDate", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2"></div>
            <div class="col-md-3">
                <div class="checkbox">
                    <input type="checkbox" id="currentJob" name="isCurrentJob" value="true" />
                    @Html.Label("I currently work here")
                </div>
            </div>
        </div>


        <div class="form-group required">
            <label class=" control-label col-md-2">Position:</label>
            <div class="col-md-6">
                <input type="text" class="form-control" name="position" data-val="true" data-val-required="Position is required" />
                @Html.ValidationMessage("position", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <label class=" control-label col-md-2">Job Description:</label>
            <div class="col-md-6">
                <textarea class="form-control" name="jobDescription"></textarea>
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (User.IsInRole("Student"))
                {

                    var applicationFormId = Convert.ToInt32(Session["AppFormId"]);
                    var appFormservice = EngineContext.Resolve<IApplicationFormRepository>();
                    var applicationFormWorkFlow = appFormservice.GetFirstApplicationFormWorkFlow(applicationFormId);
                    var workFlow = appFormservice.GetWorkFlowItem(applicationFormWorkFlow.WorkFlowId);
                    var templatesForAppForm = appFormservice.GetFirstTemplatesInApp(applicationFormId);
                    var formTemplate = appFormservice.GetFormTemplate(templatesForAppForm.FormTemplateId);

                    if (!(workFlow.Name.Equals("Fill") && formTemplate.Code.Equals("WE")))
                    {
                        @Html.ActionLink("<< Back", "BackApplication", "Fill", null, new { @class = "btn btn-default" })
                    }
                    if (@Model.Count() < maxEntry)
                    {
                        <input type="submit" value="Add" class="btn btn-primary" id="btnSubmitWorkExp" />
                    }
                    else
                    {
                        <input type="submit" value="Add" class="btn btn-primary" disabled="" />
                    }

                    @Html.ActionLink("Continue >>", "ContinueFromWorkExperience", "WorkExperience", null, new { @class = "btn btn-success" })
                }
                else
                {
                    @Html.ActionLink("<< Back", "BackApplication", "Fill", null, new { @class = "btn btn-default", @disabled = true })
                    <input type="submit" value="Add" class="btn btn-success disabled" />
                    @Html.ActionLink("Continue >>", "ContinueFromWorkExperience", "WorkExperience", null, new { @class = "btn btn-success", @disabled = true })
                }

            </div>
        </div>


    </div>
}

<script>
    $(function () {
        $('#EndDate,#StartDate,#StartDate-1,#EndDate-1,#StartDate-2,#EndDate-2,#StartDate-3,#EndDate-3').datepicker({
            showOn: "button",
            buttonImage: "/EduApply/images/calendar.gif",
            //buttonImage: "/images/calendar.gif",
            buttonImageOnly: true,
            buttonText: "Select date",
            dateFormat: 'dd-M-yy',
            changeMonth: true,
            changeYear: true,
            yearRange: '1960:2060',
            defaultDate: 'Date.today()'
        });

        $("#btnSubmitWorkExp").click(function () {
            //var dateValue = $('#EndDate').val();
            //if (dateValue != "") {
            //    $('#EndDate').addClass("valid").removeClass("input-validation-error");
            //}
            if (!$("#currentJob").is(":checked") && $("#EndDate").val() == "") {
                $("#EndDate").addClass("input-validation-error").removeClass("valid");
                return false;
            } else {
                $('#EndDate').addClass("valid").removeClass("input-validation-error");
            }
        });

        $("#currentJob").change(function () {
            if ($(this).is(":checked")) {
                $('#EndDate').addClass("valid").removeClass("input-validation-error");
            }
        });

        $(".Delete").click(function () {
            return confirm("Are you sure you want to delete this work experience from your application");
        });
    });

    function editWorkExperience(id) {
        $("#" + id + '-read').hide();
        $("#" + id + '-edit').show();
    }
    function cancelEdit(id) {
        $("#" + id + '-edit').hide();
        $("#" + id + '-read').show();
    }
</script>