using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EduApply.Data.Entities;
using EduApply.Logic.Utility;

namespace EduApply.Logic.Interfaces
{
    public interface IConfigurationService
    {
        IEnumerable<Session> GetSessions();
        Session GetSession(int id);
        Session GetSessionByAppForm(ApplicationForm applicationForm);
        Faculty GetFaculty(int id);
        Department GetDepartment(int id);
        IEnumerable<Faculty> GetFaculties(string name);
        IEnumerable<Department> GetDepartments(string name);
        IEnumerable<Department> GetDepartmentsByCode(string code);
        IEnumerable<Session> GetSessions(string name);
        IEnumerable<Program> GetPrograms(string name);
        IEnumerable<Program> GetProgramsByCode(string code);
        IEnumerable<Course> GetCourses(string name);
        IEnumerable<Course> GetCoursesByDepId(int departmentId);
        IEnumerable<Course> GetCoursesByCode(string code);
        IEnumerable<Faculty> GetFaculties();
        IEnumerable<Department> GetDepartments();
        IEnumerable<Department> GetDepartments(int facultyId);
        IEnumerable<Program> GetPrograms();
        IEnumerable<ClassOfDegree> GetDegrees();
        IEnumerable<ClassOfDegree> GetDegrees(int formId);
        JambPageBreakdown GetJambBreakDown(int sessionId, int skip, int length, string sSearch);

        JambBiodataPageBreakdown GetJambBiodata(int sessionId, int skip, int length, string sSearch);
        IEnumerable<SessionResult> GetSessionResult(int? sessionId);
        PersonalInformation GetPersonalInformationByRegNum(string regNum);
        IEnumerable<PersonalInformation> GetPersonalInformations();
        PersonalInformation GetPersonalInformation(string id);
        Program GetProgram(int id);
        JambBreakDown GetJambBreakDown(string regNum);
        JambBiodata GetJambBiodata(string regNum);
        JambBreakDown GetJambResult(long id);
        SessionResult GetSessionResult(long id);
        SessionResult GetSessionResult(string regNum);
        SessionResult GetSessionResult(int sessionId, string regNum);
        IEnumerable<Course> GetCourses();
        IEnumerable<Course> GetCourses(int programId);
        IEnumerable<Program> GetProgramsByCourseId(int courseId);
        IEnumerable<WorkFlow> GetWorkFlow();

        WorkFlow GetWorkFlow(int workFlowId);
        Course GetCourse(int id);
        //IEnumerable<Course> GetCourses(int departmentId);
        void SaveFaculty(Faculty faculty);
        void SaveDepartment(Department department);
        void SaveCourse(Course course);
        void SaveSession(Session session);
        void SaveProgram(Program program);
        void SaveJambBreakDown(JambBreakDown jambBreakDown);
        void SaveJambBiodata(JambBiodata biodata);
        void SaveSessionResult(SessionResult sessionResult);
        void SaveProgramCourse(ProgramCourse programCourse);
        void SaveAppFormProgramCourse(AppFormProgramCourse appFormProgramCourse);
        IEnumerable<AppFormProgramCourse> GetAppFormProgramCourses(int appFormId);
        void DeleteAppFormProgramCourse(AppFormProgramCourse appFormProgramCourse);
        //void ApplicationFormWorkFlow(ApplicationFormWorkFlow appWorkFlow);
        void DeleteProgramCourse(ProgramCourse programCourse);
        void DeleteSessionResult(SessionResult sessionResult);
        void DeleteJambBreakDown(JambBreakDown jambBreakDown);
        IEnumerable<ProgramCourse> GetProgramCoursesByProgramId(int programId);
        IEnumerable<ProgramCourse> GetProgramCoursesByCourseId(int courseId);
        IEnumerable<ProgramCourse> GetProgramCourses();
        ProgramCourse GetProgramCourseByCourseIdAndProgramId(int programId, int courseId);
        FormResult GetFormResult(long id);
        //FormResult GetFormResult(string regNum);
        FormResult GetFormResult(string appNum);
        FormResult GetFormResult(int formId, string regNum);
        void SaveFormResult(FormResult formResult);
        void DeleteFormResult(FormResult formResult);
        FormPageBreakdown GetFormResult(int applicationFormId, int skip, int length, string sSearch);
        Application GetApplications(string appNum);
        Application GetApplicationByEmailAndFormId(string email, int formId);
        Application GetApplicationByRegNumAndAppNum(string regNum, string appNum);
        IEnumerable<Application> GetApplicationsByRegNum(string regNum);
        IEnumerable<Application> GetApplications(int applicationFormId);
        IEnumerable<Application> GetApplicationsByParams(int? sessionId, int? programId, int? courseId, int? appFormId);
        IEnumerable<Application> GetApplications();
        IEnumerable<MappedForm> GetMappedForms(int formId);
        IEnumerable<AppFormGateway> GetAppFormGateways(int formId);
        IEnumerable<AppFormClassOfDegree> GetAppFormClassOfDegrees(int formId);
        IEnumerable<Gateway> GetGateways();
        void SaveMappedForm(MappedForm mappedForm);
        void SaveAppFormGateway(AppFormGateway appFormGateway);
        void DeleteMappedForm(MappedForm mappedForm);
        void DeleteAppFormGateway(AppFormGateway appFormGateway);
        //AttemptedPayment GetAttemptedPayment(long applicationId);
        IEnumerable<AttemptedPayment> GetAttemptedPayments(long applicationId);
        DateTime GetCurrentWestAfricanDateTime();
        string GetCurrentUrl();
        string GetSchoolName();
        string GetPmb();
        IEnumerable<Bank> GetBanks();
        Split GetSplit(long id);
        IEnumerable<Split> GetSplits(int applicationFormId);
        void SaveSplit(Split split);
        void DeleteSplit(Split split);
        void UpdateSplit(Split split);
        IEnumerable<ApplicationNoFormat> GetFormFormats();
        ApplicationNoFormat GetApplicationNoFormatByFormId(int applicationFormId);
        ApplicationNoFormat GetApplicationNoFormat(long id);
        void SaveApplicationNoFormat(ApplicationNoFormat format);
        void UpdateApplicationNoFormat(ApplicationNoFormat format);
        void DeleteApplicationNoFormat(int applicationFormId);
        WorkFlow GetWorkFlowbyActionName(string actionName);
        FormTemplate GetFormTemplateByCode(string code);

        void SaveAppFormClassOfDegree(AppFormClassOfDegree appFormClassOfDegree);
        void DeleteAppFormClassOfDegree(AppFormClassOfDegree appFormClassOfDegree);
        IEnumerable<AdmissionLetterFormat> GetAdmissionLetterFormats();
        AdmissionLetterFormat GetAdmissionLetterFormat(int id);

    }
}
