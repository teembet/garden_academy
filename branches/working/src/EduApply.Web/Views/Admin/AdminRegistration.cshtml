@model EduApply.Web.Models.AdminRegistrationModel

@{
    ViewBag.Title = "Admin Registration";
    Layout = "~/Views/Shared/_PlainLayout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>AdminRegistration</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div>
            @{
        List<SelectListItem> maritalStatus = new List<SelectListItem>()
                            {
                                new SelectListItem {Text = "Single", Value = "Single"},
                                new SelectListItem {Text = "Married", Value = "Married"},
                                new SelectListItem {Text = "Divorced", Value = "Divorced"},
                                new SelectListItem {Text = "Separated", Value = "Separated"},
                                new SelectListItem{Text = "Widowed", Value = "Widowed"}
                            };

        List<SelectListItem> gender = new List<SelectListItem>()
                            {
                                new SelectListItem{Text = "Male",Value = "Male"},
                                new SelectListItem{Text = "Female", Value = "Female"}
                            };
            }
            <h4>Admin</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger alert alert-danger" })
            <div class="row">
                <div class="row">
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.LastName)
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.FirstName)
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MiddleName)
                            @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.DateOfBirth)
                            @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control custom-disable-textbox size95", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.Gender)
                            @Html.DropDownListFor(model => model.Gender, gender, "<--Select-->", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.MaritalStatus)
                            @Html.DropDownListFor(model => model.MaritalStatus, maritalStatus, "<--Select-->", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.HomeAddress)
                            @Html.EditorFor(model => model.HomeAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HomeAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.StateOfResidence)
                            @Html.DropDownListFor(model => model.StateOfResidence, new SelectList(Model.ResidentStates, "Name", "Name", Model.StateOfResidence), "<--Select-->", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StateOfResidence, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.Email)
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.PhoneNumber)
                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PostalAddress)
                            @Html.EditorFor(model => model.PostalAddress, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PostalAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.Nationality)
                            @Html.DropDownListFor(model => model.Nationality, new SelectList(Model.Countries, "Id", "Name", Model.Nationality), "<--Select-->", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Nationality, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.StateOfOrigin)
                            @Html.DropDownListFor(model => model.StateOfOrigin, new SelectList(Model.States, "Id", "Name", Model.StateOfOrigin), "<--Select-->", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StateOfOrigin, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.LocalGovernment)
                            @Html.DropDownListFor(model => model.LocalGovernment, new SelectList(Model.Lgaz, "Id", "Name", Model.LocalGovernment), "<--Select-->", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LocalGovernment, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.Password)
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="form-group required">
                            @Html.LabelFor(model => model.ConfirmPassword)
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <div class="col-md-10">
                            <input type="submit" value="Submit" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <div class="col-md-12">
                            @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.HiddenFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-12">
                            @Html.HiddenFor(model => model.ConfirmationCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <script>
        $(function () {
            $("#DateOfBirth").datepicker({
                showOn: "button",
                buttonImage: "/images/calendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date",
                dateFormat: 'dd-M-yy',
                changeMonth: true,
                changeYear: true,
                yearRange: '1960:2015',
                defaultDate: 'Date.today()'
            });
        });
    </script>

    <script type="text/javascript">
        $(function () {
            $("#Nationality").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#StateOfOrigin");
                // var statesProgress = $("#states-loading-progress");
                //statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStateByCountryId"))",
                    data: { "countryId": selectedItem },
                    success: function (data) {
                        ddlStates.html('');
                        ddlStates.append($('<option></option>').val(null).html("----"));
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        // statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        //   statesProgress.hide();
                    }
                });
            });

            $("#StateOfOrigin").change(function () {
                var selectedItem = $(this).val();
                var ddlLgas = $("#LocalGovernment");
                // var statesProgress = $("#states-loading-progress");
                //statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetLgaByStateId"))",
                    data: { "stateId": selectedItem },
                    success: function (data) {
                        ddlLgas.html('');
                        //ddlLgas.append('<option><--Select--></option>');
                        ddlLgas.append($('<option></option>').val(null).html("----"));
                        $.each(data, function (id, option) {
                            ddlLgas.append($('<option></option>').val(option.id).html(option.name));
                        });
                        // statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Local Governments.');
                        //   statesProgress.hide();
                    }
                });
            });
        });


    </script>

</body>
</html>
